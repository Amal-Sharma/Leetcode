//Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

//Example 1:

//Input: n = 3
//Output: ["((()))","(()())","(())()","()(())","()()()"]
//Example 2:

//Input: n = 1
//Output: ["()"]


class Solution {
public:
    void dfs(int open, int close, int n,string str,vector<string>&res){
        if(open == close && open + close == n*2){
            res.push_back(str);
            return ;
        }
        if(open < n){
            dfs(open+1,close,n,str+"(",res);
        }
        if(close < open){
            dfs(open,close+1,n,str+")",res);
        }

    }

    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        dfs(0,0,n,"",-ans);
        return ans;
    }
};
