/*
Given the root of a perfect binary tree, reverse the node values at each odd level of the tree.

For example, suppose the node values at level 3 are [2,1,3,4,7,11,29,18], then it should become [18,29,11,7,4,3,1,2].
Return the root of the reversed tree.

A binary tree is perfect if all parent nodes have two children and all leaves are on the same level.

The level of a node is the number of edges along the path between it and the root node.



Input: root = [2,3,5,8,13,21,34]
Output: [2,5,3,8,13,21,34]
Explanation: 
The tree has only one odd level.
The nodes at level 1 are 3, 5 respectively, which are reversed and become 5, 3.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* reverseOddLevels(TreeNode* root) {
        queue<TreeNode*> q;
        q.push(root);
        bool reverseflag = false;
        while(!q.empty()){
            int sz = (int)q.size();
            vector<TreeNode*> currentLevel;
            for(int i=0;i< sz;i++)
            {
                if(q.front() == NULL){
                    q.pop();
                    continue;
                }
                 currentLevel.push_back(q.front());
                q.push(q.front()->left);
                q.push(q.front()->right);
                q.pop();
            }
           if(reverseflag){
                int l = 0;
                int r = (int)currentLevel.size()-1;
                while( l <= r){
                    swap(currentLevel[l++]->val,currentLevel[r--]->val);
                    }
            }
            reverseflag = !reverseflag;
        }
        return root;
    }
    
};
